@use 'sass:meta';
@mixin utility-builder($utility) {
  @each $name, $utility-data in $utility {
    // Destructuring map
    $prefix: map-get(
      $map: $utility-data,
      $key: 'prefix',
    );
    $items: map-get(
      $map: $utility-data,
      $key: 'items',
    );
    $property: map-get(
      $map: $utility-data,
      $key: 'property',
    );
    $responsive: map-get(
      $map: $utility-data,
      $key: 'responsive',
    );
    $root: map-get(
      $map: $utility-data,
      $key: 'root',
    );
    $render: map-get(
      $map: $utility-data,
      $key: 'render',
    );
    $rem: map-get(
      $map: $utility-data,
      $key: 'rem',
    );

    @if $rem {
      $rem-item-list: ();
      @each $item-name, $item-value in $items {
        $dummy: (
          $item-name: #{rem($item-value)},
        );
        $rem-item-list: map-merge(
          $map1: $rem-item-list,
          $map2: $dummy,
        );
      }
      $items: ();
      $items: map-merge(
        $map1: $items,
        $map2: $rem-item-list,
      );
    }

    @if $render {
      @if $property {
        @each $item-name, $item-value in $items {
          @debug $property;
          @if ($item-name == null) {
            $class-name: #{$utility-prefix}-#{$prefix};
            .#{$class-name} {
              #{$property}: #{$item-value};
            }
          } @else {
            $class-name: #{$utility-prefix}-#{$prefix}#{$item-name};
            .#{$class-name} {
              #{$property}: #{$item-value};
            }
          }
          //$class-name: #{$utility-prefix}-#{$prefix}#{$item-name};
          //@error $class-name;
        }

        @if $responsive {
          @each $size, $value in $t-breakpoints {
            @each $item-name, $item-value in $items {
              @include breakpoint-up($size) {
                $class-name: #{$utility-prefix}-#{$prefix}#{$size}-#{$item-name};
                // @error $class-name;
                .#{$class-name} {
                  #{$property}: #{$item-value};
                }
              }
            }
          }
        }
      }
    }

    @if $root {
      :root {
        @each $item-name, $item-value in $items {
          --#{$prefix}#{$item-name}: #{$item-value};
        }
      }
    }
  }
}

@mixin theme-builder($theme) {
  @each $type, $theme-map in $theme {
    .theme-#{$type} {
      @each $name, $style-map in $theme-map {
        @each $prop, $val in $style-map {
          --#{$name}-#{$prop}: #{$val};
        }
      }
    }
  }
}
